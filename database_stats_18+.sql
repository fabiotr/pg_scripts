SELECT
    d.datname 														     AS "Database",
    pg_size_pretty(pg_database_size(d.datname)) 									     AS "Size",
    trim(to_char(100 * xact_rollback::NUMERIC / (xact_rollback + xact_commit),'000D99') || ' %') 			     AS "Rollback",
    pg_size_pretty(trunc((current_setting('block_size')::bigint * blks_hit)  / reset_days)::bigint)                          AS "Hit/Day",
    pg_size_pretty(trunc((current_setting('block_size')::bigint * blks_read) / reset_days)::bigint)                          AS "Read/Day",
    trim(to_char(100 * blks_hit::NUMERIC      / (blks_hit + blks_read)       ,'000D99') || ' %') 			     AS "Cache hit",
    trim(to_char(100 * tup_fetched::NUMERIC   / tup_returned                                             ,'000D99') || ' %') AS "Rows feth/return",
    trim(to_char(100* tup_returned::NUMERIC   / (tup_returned + tup_inserted + tup_updated + tup_deleted),'000D99') || ' %') AS "Rows SELECT",
    trim(to_char(100* tup_inserted::NUMERIC   / (tup_returned + tup_inserted + tup_updated + tup_deleted),'000D99') || ' %') AS "Rows INSERT",
    trim(to_char(100* tup_updated::NUMERIC    / (tup_returned + tup_inserted + tup_updated + tup_deleted),'000D99') || ' %') AS "Rows UPDATE",
    trim(to_char(100* tup_deleted::NUMERIC    / (tup_returned + tup_inserted + tup_updated + tup_deleted),'000D99') || ' %') AS "Rows DELETE",
    CASE deadlocks  WHEN 0 THEN NULL ELSE trim(to_char(deadlocks::NUMERIC  / reset_days,'999G990D9')) END 	  	     AS "Deadlocks  / Day",
    CASE checksum_failures WHEN 0 THEN NULL ELSE trim(to_char(checksum_failures::NUMERIC / reset_days, '999G999D9')) END     AS "Checksum fail / Day",
    checksum_last_failure 												     AS "Last Checksum fail",
    CASE temp_files WHEN 0 THEN NULL ELSE trim(to_char(temp_files::NUMERIC / reset_days,'999G990D9')) END 	  	     AS "Temp file  / Day",
    CASE temp_files WHEN 0 THEN NULL ELSE trim(pg_size_pretty(temp_bytes   / reset_days)) END 	                  	     AS "Temp bytes / Day",
    date_trunc('second', blk_read_time   / reset_days * INTERVAL '1 MIlLISECOND') 					     AS "Read time  / Day",
    date_trunc('second', blk_write_time  / reset_days * INTERVAL '1 MIlLISECOND') 					     AS "Write time / Day",
    '------------' 													     AS "Sessions",
    trim(to_char(sessions::NUMERIC           / reset_days,'999G990D9')) 	  					     AS "Total / Day",
    trim(to_char(sessions_abandoned::NUMERIC / reset_days,'999G990D9'))							     AS "Abandoned / Day",
    trim(to_char(sessions_fatal::NUMERIC     / reset_days,'999G990D9')) 	  					     AS "Fatal / Day",
    trim(to_char(sessions_killed::NUMERIC    / reset_days,'999G990D9')) 	  					     AS "Killed / Day",
    to_char((parallel_workers_to_launch::numeric / reset_days::numeric), '999G999G999') 				     AS "Workers Planned / Day",
    to_char((parallel_workers_launched::numeric  / reset_days::numeric), '999G999G999') 				     AS "Workers Lunched / Day",
    date_trunc('second',(session_time / sessions)             * INTERVAL '1 MILLISECOND') 				     AS "Time / Session",
    date_trunc('second',active_time              / reset_days * INTERVAL '1 MIlLISECOND') 				     AS "Active / Day",
    date_trunc('second',idle_in_transaction_time / reset_days * INTERVAL '1 MIlLISECOND') 				     AS "Idle in Trans. / Day", 
    '------------' 													     AS "Reset",
    to_char(stats_reset, 'YYYY-MM-DD HH24:MI:SS') 									     AS "Date",
    date_trunc('second', current_timestamp - stats_reset) 								     AS "Age" 
FROM (SELECT EXTRACT(EPOCH FROM current_timestamp - stats_reset) / (60*60*24) AS reset_days, * FROM pg_stat_database) AS d
WHERE d.datname = current_database();
